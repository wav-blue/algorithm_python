# 시간 초과

def solution(n, roads, sources, destination):
    from collections import deque
    
    #bfs (연결된 노드에 대한 정보, 시작하는 지점)
    def bfs(road_map, start):
        chk = [False for _ in range(n+1)]
        q = deque()
        q.append([destination, chk, 0])
        
        while q:
            now, chk, cnt = q.popleft()
            
            if now == start:
                return cnt
            for next_loc in road_map[now]:

                
                if not chk[next_loc]:
                    chk[next_loc] = True
                    q.append([next_loc, chk[:next_loc]+[True]+chk[next_loc+1:], cnt+1])
        return -1
    
    answer = []
    road_map = [[] for _ in range(n+1)]
    for road in roads:
        road_map[road[0]].append(road[1])
        road_map[road[1]].append(road[0])
    
    for s in sources:
        answer.append(bfs(road_map, s))
    return answer