'''
https://school.programmers.co.kr/learn/courses/30/lessons/1844
'''

def solution(maps):
    from collections import deque
    answer = 0
    
    cnt = 2
    
    n = len(maps[0])
    m = len(maps)
    
    queue = deque()
    queue.append((0, 0, cnt))
    maps[0][0] = 0
    
    moving = [[0, 1], [1, 0], [0, -1], [-1, 0]]
    
    def valid(y, x):
        return y >= 0 and y < m and x >= 0 and x < n
    while queue:
        ny, nx, cnt = queue.popleft()
        if ny == m-1 and nx == n-1:
            return cnt - 1
        
        available = 0
        for i in range(4):
            dy, dx = ny + moving[i][0], nx + moving[i][1]
            if valid(dy, dx) and maps[dy][dx] == 1:
                available += 1
                maps[dy][dx] = cnt
                queue.append((dy, dx, cnt+1))
        if available == 0:
            if ny == m-1 and nx == n-1:
                return cnt - 1
    return -1