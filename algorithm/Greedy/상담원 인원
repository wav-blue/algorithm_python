#https://school.programmers.co.kr/learn/courses/30/lessons/214288

def solution(k, n, reqs):
    from queue import PriorityQueue
    
    def combination_total(total, div):
        def comb(total, div, path):
            if div == 1:
                answer.append(path + [total])
                return 0
            for i in range(1, total-div+2):
                comb(total - i, div - 1, path + [i])
        answer = []
        comb(total, div, [])
        return answer
    
    def count_waiting(table, room):
        total_waiting = 0
        rooms = PriorityQueue(maxsize=room)
        for _ in range(room):
            rooms.put(0)
        for req in table:
            end_time = rooms.get() # 상담이 끝나 1개 이상의 자리가 생기는 시간
            if req[0] > end_time: # waiting 없음
                rooms.put(req[1])
            else: # waiting 발생
                waiting = end_time - req[0]
                total_waiting += waiting
                rooms.put(req[1] + waiting)
            
        return total_waiting
    
    time_table = [[] for _ in range(k)]
    for req in reqs:
        time_table[req[2]-1].append([req[0], req[0]+req[1]])

    result = 987654321
    cache = [[0 for _ in range(n-k+1)] for _ in range(k)]
    
    for i in range(k):
        for j in range(n-k+1):
            #타입 i에 j+1명 배정
            cache[i][j] = count_waiting(time_table[i], j + 1)

    for case in combination_total(n, k):
        temp = 0
        for i in range(k):
            temp += cache[i][case[i]-1]
        result = min(result, temp)
    
    return result